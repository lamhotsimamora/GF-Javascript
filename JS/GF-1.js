/*
Copyright (c) 2017, Garuda Query Javscript
Author : Lamhot Simamora. 
Web    : www.lamhotsimamora.com
All rights reserved.
For licensing, see LICENSE.md 'https://raw.githubusercontent.com/lamhotsimamora/GF-Javascript/master/license.md'
*/
var run_console = true;
var _sWidth = screen.width; var _sHeight = screen.height; var _protocol; var _host;var _obj_d = new Date();
var _error_message = {id:"Id of object is undefined", name: "Name of object is undefined", url: "Url is undefined", url_n : "Url is not valid", clbck_id: "Create callback function or id of object", val: "Value of object is undefined", val_n: "Value is not found", cnvs: "Id Canvas is undefined", val_n: "Value is not found", class : "Class of object is undefined", obj : "Element is not found", fu : "The parameter should be a callback function ", fu_n : "Function call back is undefined", content : "Content is undefined"}
var _da = new Array("1", "2", "3", "4", "5", "6", "7", "8", "9", "0"); var _dh = new Array("?", "$", "*", "~", "!", "^", "%", ">", "-", "|"); var _componentHTML = {li_open: "<li class='", li_close: '</li>', tr_open: "<tr id='", tr_close: '</tr>', td_open: "<td>", td_close: '</td>', option_open : "<option value='", option_close : '</option>'}
function _getById(o, fu) {try {if (o === undefined) { if (run_console) { _writeLog("_getById -> " + _error_message.id); } return; } if (document.getElementById("" + o + "")) {var obj = document.getElementById("" + o + ""); if (fu === undefined) {return obj; } else {if (_isFunction(fu)) {fu(obj); } } } else {if (run_console) {_writeLog("_getById -> "+_error_message.obj); } return false; } } catch (err) {if (run_console) { _writeLog("_getById -> " + err); } } } function _getIdByName(n) {try {if (n === undefined) {if (run_console) {_writeLog("_getIdByName -> " + _error_message.name); } return; } if (document.getElementsByName("" + n + "")) {var id = document.getElementsByName("" + n + ""); return id; } else {return false; } } catch (err) {if (run_console) {_writeLog("_getIdByName -> " +err); } } } function _getNameById(o) {try {if (o === undefined) {if (run_console) {_writeLog("_getNameById -> " + _error_message.id); } return; } if (document.getElementById("" + o + "")) {var obj = document.getElementById("" + o + "").name; return obj; } else {if (run_console) {_writeLog("_getNameById -> "+_error_message.obj); } } } catch (err) {if (run_console) {_writeLog("_getNameById -> "+err); } } } function _getHost() {p = window.location.protocol + "//"; q = window.location.host + "/"; return p + q; } function _printTo(o, c) {try {if (o === undefined) {if (run_console) {_writeLog("_printTo -> " + _error_message.id); } return; } if (c === undefined) {if (run_console) {_writeLog("_printTo-> "+_error_message.content); } return; } var obj = _getById(o); if (obj) {obj.innerHTML = c; return obj; } else {if (run_console) {_writeLog("_printTo -> "+_error_message.obj); } return false; } } catch (err) {if (run_console) {_writeLog("_printTo -> "+err); } } } function _clear(o, type) {try {if (o === undefined) {if (run_console) {_writeLog("_clear -> " + _error_message.id); } return; } if (_getById(o)) {if (type === undefined) {_setValue(o,""); } else {_getById(o).innerHTML = ""; } } else {if (run_console) {_writeLog("_clear -> "+_error_message.obj); } return false; } } catch (err) {if (run_console) {_writeLog("_clear -> "+err); } } } function _focus(o) {try {if (o === undefined) {if (run_console) {_writeLog("_focus->" + _error_message.id); } return; } if (_getById(o)) {_getById(o).focus(); } else {if (run_console) {_writeLog("_focus -> "+_error_message.obj); } } } catch (err) {if (run_console) {_writeLog("_focus -> "+err); } } } function _isUrl(s) { try { if (s === 'undefined') { if (run_console) { _writeLog("_isUrl-> "+_error_message.url); return; } } var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/; return regexp.test(s); } catch (err) { if (run_console) { _writeLog(err); return; } } } function _getValById(o) {try {if (o === undefined) {if (run_console) {_writeLog("_getValById->" + _error_message.id); } return; } if (_getById(o)) {if (_getById(o).value === '') {return _getById(o).value; } else {var v = _getById(o).value.trim(); return v; } } else {if (run_console) {_writeLog("_getValById -> "+_error_message.obj); } } } catch (err) {if (run_console) {_writeLog("_getValById -> "+err); } } } function _getValByName(n, i) {try {if (n === undefined) {if (run_console) {_writeLog("_getValByName -> " + _error_message.name); } return; } if (i === undefined) {if (run_console) {_writeLog("_getValByName -> Index of element is undefined set default to 0"); } i = 0; } if (document.getElementsByName(n)[i].value) {return document.getElementsByName(n)[i].value.trim(); } } catch (err) {if (run_console) { _writeLog("_getValByName -> "+err); } } } function _docWrite(v) {try {if (v === undefined) {if (run_console) {_writeLog("_docWrite -> "+_error_message.content); } return; } var obj = document.write(v); return obj; } catch (err) { if (run_console) { _writeLog("_docWrite -> "+err); } } } function _colorFont(s, c) {if (c === undefined) { return "<font color='#e74c3c'>" + s + "</font>"; } else {return "<font color='" + c + "'>" + s + "</font>"; } } function _newForm(c, u, w, h) {try {if (c === undefined) { if (run_console) { _writeLog("_newForm->" + _error_message.val_n); } return; } w = (w === undefined) ? 500 : w; h = (h === undefined) ? 500 : h; if (u === undefined) {var wnd = window.open("", "", "width=" + w + ",height=" + h + ""); wnd.document.write(c); wnd.focus(); return wnd; } else {if (_isUrl(u)) {var wnd = window.open(u, "", "width=" + w + ",height=" + h + ""); wnd.focus(); return wnd; } else { if (run_console) { _writeLog("_newForm -> " + _error_message.url); } } } } catch (err) {if (run_console) { _writeLog(err); } } } function _isFunction(fnc) {var t = {}; return fnc && t.toString.call(fnc) === '[object Function]'; } function _writeLog(v, t) {var r = "#e74c3c"; var g = "#2ecc71"; if (t === undefined) { console.log("%c " + v + "", 'background: #ffffff; color: ' + r); } else if (t === false) { console.log("%c " + v + "", 'background: #ffffff; color: ' + g); } else { console.log("%c " + v + "", 'background: #ffffff; color: ' + t); } } function _loadDoc(u, fu) {try {if (u === undefined) {if (run_console) { _writeLog("_loadFrom -> " + _error_message.url); } return; } if (fu === undefined) {if (run_console) {_writeLog("_loadDoc -> " + _error_message.clbck_id); } return; } if (window.XMLHttpRequest) { xhttp = new XMLHttpRequest(); } else { xhttp = new ActiveXObject("Microsoft.XMLHTTP"); } xhttp.onreadystatechange = function() {if (this.readyState == 0) {if (run_console) { _writeLog("_loadDoc -> Object is not initialized"); } return false; } if (this.readyState == 1) { if (run_console) { _writeLog("_loadDoc -> Start Load data"); } } if (this.readyState == 2) {if (run_console) { _writeLog("_loadDoc -> Finish Load Data"); } } if (this.status == 202) {if (run_console) { _writeLog("_loadDoc -> Request is process"); } } if (this.status == 203) {if (run_console) { _writeLog("_loadDoc -> Request is denied ! Header of request is not come from original server !"); } return false; } if (this.status == 400) {fu(false); return false; } else if (this.status == 404) { fu(false); return false; } else if (this.readyState == 4 && this.status == 200) {if (_isFunction(fu)) {fu(this.responseText); if (run_console) { _writeLog("_loadDoc -> Run Function Call Back " + fu, false); } } else {_printTo(fu, this.responseText); if (run_console) { _writeLog("_loadDoc -> Success load document", false); } } } }; xhttp.open("GET", _escapeHtml(u), true); xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); xhttp.send(); } catch (err) { if (run_console) { _writeLog(err); } } } function _requestPOST(u, p, fu) {try {if (u === undefined) {if (run_console) { _writeLog("_requestPOST -> " + _error_message.url); } return; } if (p === undefined) {if (run_console) { _writeLog("_requestPOST -> Parameter POST Is Not Found"); } return; } if (fu === undefined) {if (run_console) { _writeLog("_requestPOST-> " + _error_message.clbck_id); } return; } if (window.XMLHttpRequest) { xhttp = new XMLHttpRequest(); } else { xhttp = new ActiveXObject("Microsoft.XMLHTTP"); } xhttp.onreadystatechange = function() {if (this.readyState == 0) {if (run_console) { _writeLog("_requestPOST -> Object is not initialized"); } return false; } if (this.readyState == 1) { if (run_console) { _writeLog("_requestPOST -> Start Load data"); } } if (this.readyState == 2) { if (run_console) { _writeLog("_requestPOST -> Finish Load Data"); } } if (this.status == 202) { if (run_console) { _writeLog("_requestPOST -> Request is process"); } } if (this.status == 203) {if (run_console) { _writeLog("_requestPOST -> Request is denied ! Header of request is not come from original server !"); } return false; } if (this.status == 400) { fu(false); return false; } else if (this.status == 404) {fu(false); return false; } else if (this.readyState == 4 && this.status == 200) {if (_isFunction(fu)) {fu(this.responseText); if (run_console) { _writeLog("_requestPOST -> Run Function Call Back " + fu, false); } } else {_printTo(fu, this.responseText); if (run_console) { _writeLog("_requestPOST -> Print Success", false); } } } }; xhttp.open("POST", _escapeHtml(u), true); xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); xhttp.send("" + p + ""); } catch (err) { if (run_console) { _writeLog(err); } } } function _requestGET(u, fu) {try {if (u === undefined) { if (run_console) { _writeLog("_requestGET -> " + _error_message.url); } return; } if (fu === undefined) { if (run_console) { _writeLog("_requestGET->" + _error_message.clbck_id); } return; } if (window.XMLHttpRequest) { xmlhttp = new XMLHttpRequest(); } else { xmlhttp = new ActiveXObject("Microsoft.XMLHTTP"); } xmlhttp.onreadystatechange = function() {if (this.readyState == 0) {if (run_console) { _writeLog("_requestGET -> Object is not initialized"); } return false; } if (this.readyState == 1) {if (run_console) { _writeLog("_requestGET -> Start Load data"); } } if (this.readyState == 2) {if (run_console) { _writeLog("_requestGET -> Finish Load Data"); } } if (this.status == 202) {if (run_console) { _writeLog("_requestGET -> Request is process"); } } if (this.status == 203) {if (run_console) { _writeLog("_requestGET -> Request is denied ! Header of request is not come from original server !"); } return false; } if (this.status == 400) { fu(false); return false; } else if (this.status == 404) { fu(false); return false; } else if (this.readyState == 4 && this.status == 200) {if (_isFunction(fu)) {fu(this.responseText); if (run_console) { _writeLog("_requestGET -> Run Function Call Back " + fu, false); } } else {_printTo(fu, this.responseText); if (run_console) { _writeLog("_requestGET -> Print Success", false); } } } }; xmlhttp.open("GET", "" + u + "", true); xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); xmlhttp.send(); } catch (err) { if (run_console) { _writeLog(err); } } } function _checkEmail(e) {try {if (e===undefined) {if (run_console) {_writeLog("_checkEmail -> Email is undefined"); } return; } var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; return re.test(e); } catch (err) { if (run_console) { _writeLog("_checkEmail -> "+err); } } } function _randomStr(l) {try {if (l === undefined) { l = 10; } var r = ""; var c = "a1b2c3d4e5f6g7h8i9j0klmnopqrstuvwxyz"; for (var i = 0; i < l; i++) {r += c.charAt(Math.floor(Math.random() * c.length)); } if (run_console) {_writeLog("_randomStr -> Success Generate Random String", false); } return r; } catch (err) {if (run_console) { _writeLog("_randomStr -> "+err); } } } function _randomInt(l) {try {var r = ""; var c = "1234567890"; if (l === undefined) { l = 10; } for (var i = 0; i < l; i++) {r += c.charAt(Math.floor(Math.random() * c.length)); } if (run_console) { _writeLog("_randomInt -> Success Generate Random Integer", false); } return r; } catch (err) {if (run_console) { _writeLog("_randomInt -> "+err); } } } function _encryptInt(v) {try {if (v === undefined) {if (run_console) { _writeLog("_encryptInt -> " + _error_message.val_n); } return; } v = v.toString(); var lv = v.length; var d = new Array(lv); for (var i = 0; i < lv; i++) {var res = v.substring(i, i + 1); res = abc(res); d[i] = res; } var value_result = d.toString(); String.prototype.replaceAll = function(target, replacement) { return this.split(target).join(replacement); }; if (run_console) {_writeLog("_encryptInt -> Success Encrypt Integer", false); } return value_result.replaceAll(",", "");; function abc(v) {if (v === _da[9]) { return _dh[2]; } if (v === _da[7]) { return _dh[4]; } if (v === _da[5]) { return _dh[6]; } if (v === _da[3]) { return _dh[8]; } if (v === _da[0]) { return _dh[1]; } if (v === _da[1]) { return _dh[3]; } if (v === _da[2]) { return _dh[5]; } if (v === _da[4]) { return _dh[7]; } if (v === _da[6]) { return _dh[9]; } if (v === _da[8]) { return _dh[0]; } if (run_console) { _writeLog("Value must be integer only -> " + v); } return v; } } catch (err) { if (run_console) { _writeLog("_encryptInt -> " +err); } } } function _decryptInt(v) {try {if (v === undefined) {if (run_console) { _writeLog("_decryptInt-> " + _error_message.val_n); } return; } var length_value = v.length; var _data = new Array(length_value); for (var i = 0; i < length_value; i++) {var res = v.substring(i, i + 1); res = abc(res); _data[i] = res; } var value_result = _data.toString(); String.prototype.replaceAll = function(target, replacement) {return this.split(target).join(replacement); }; if (run_console) { _writeLog("_decryptInt -> Success Decrypt Integer", false); } return value_result.replaceAll(",", "");; function abc(v) {v = v.toUpperCase(); if (v === _dh[2]) { return _da[9]; } if (v === _dh[4]) { return _da[7]; } if (v === _dh[6]) { return _da[5]; } if (v === _dh[8]) { return _da[3]; } if (v === _dh[1]) { return _da[0]; } if (v === _dh[3]) { return _da[1]; } if (v === _dh[5]) { return _da[2]; } if (v === _dh[7]) { return _da[4]; } if (v === _dh[9]) { return _da[6]; } if (v === _dh[0]) { return _da[8]; } if (run_console) { _writeLog("Key not found " + v); } return v; } } catch (err) { if (run_console) { _writeLog("_decryptInt -> "+err); } } } function _replaceJS(d) {try {if (d) {var r = d.replace("<script", "ssccrriipptt"); r = r.replace("script>", "ssccrriipptt"); r = r.replace("<script>", "ssccrriipptt"); r = r.replace("</script>", "ssccrriipptt"); r = r.replace("alert", "aallleerrtt"); r = r.replace("alert(", "alleerrtt"); r = r.replace(");", "}};;"); return r; } } catch (err) { if (run_console) { _writeLog("_replaceJS -> "+err); } } } function _replaceMaster(s) {try {if (s) {var r = s.replace("'", "\'"); r = r.replace("<?php", "%tag%php%"); r = r.replace("#", "%HASTAG%"); r = r.replace("<!--", "tag comment"); r = r.replace("-->", "tag comment"); r = r.replace("<input type=", "input text"); r = r.replace("<style>", "style"); r = r.replace("</style>", "style"); r = r.replace("<button>", "button"); r = r.replace("</button>", "button"); r = r.replace("</hr", "hr"); r = r.replace("<i>", "i"); r = r.replace("</i>", "i"); r = r.replace("<body bgcolor=", "body background color"); r = r.replace("<html>", "html"); r = r.replace("</html>", "html"); r = _replaceJS(r); return r; } } catch (err) { if (run_console) { _writeLog("_replaceMaster -> " + err); } } } function _returnMaster(s) {try {if (s) {var r = s.replace("%HASTAG%", "#"); r = r.replace("%tag%php%", "<?php"); return r; } } catch (err) { if (run_console) { _writeLog("_returnMaster -> "+err); } } } function _escapeHtml(str) { try { return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/(?:\r\n|\r|\n)/g, " "); } catch (err) { if (run_console) { _writeLog(err); } } } function _setCookie(_name, _value, _exdays) { try { if (_name === undefined) { if (run_console) { _writeLog("_setCookie->Name of Cookie is nothing"); } return; } if (_value === undefined) { if (run_console) { _writeLog("_setCookie->Value of Cookie is nothing->set fefault from name"); } _value = _name; } if (_exdays === undefined) { _exdays = 60; } var d = new Date(); d.setTime(d.getTime() + (_exdays * 24 * 60 * 60 * 1000)); var expires = "expires=" + d.toUTCString(); document.cookie = _name + "=" + _value + ";" + expires + ";path=/"; if (run_console) { _writeLog("_setCookie->Success Create new cookie ", false); } } catch (err) { if (run_console) { _writeLog(err); } } } function _getCookie(_name) { try { if (_name === undefined) { if (run_console) { _writeLog("_getCookie->Name of Cookie is nothing"); } return; } var name = _name + "="; var decodedCookie = decodeURIComponent(document.cookie); var ca = decodedCookie.split(';'); for (var i = 0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == ' ') { c = c.substring(1); } if (c.indexOf(name) == 0) { if (run_console) { _writeLog("_getCookie-> Success get cookie of " + _name + " is " + c.substring(name.length, c.length), false); } return c.substring(name.length, c.length); } } return ""; } catch (err) { if (run_console) { _writeLog(err); } } } function _deleteCookie(_name) { try { if (_name === undefined) { if (run_console) { _writeLog("_deleteCookie-> Name of cookie is nothing"); } return; } document.cookie = "" + _name + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;"; } catch (err) { if (run_console) { _writeLog(err); } } } function _detectBrowser() { try { var isChrome = !!window.chrome && !!window.chrome.webstore; if (isChrome) { return "Chrome"; } var isOpera = (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0; if (isOpera) { return "Opera"; } var isFirefox = typeof InstallTrigger !== 'undefined'; if (isFirefox) { return "Firefox"; } var isSafari = /constructor/i.test(window.HTMLElement) || (function(p) { return p.toString() === "[object SafariRemoteNotification]"; })(!window['safari'] || safari.pushNotification); if (isSafari) { return "Safari"; } var isIE = /*@cc_on!@*/ false || !!document.documentMode; if (isIE) { return "Internet Explorer"; } var isEdge = !isIE && !!window.StyleMedia; if (isIE) { return "Edge"; } var isBlink = (isChrome || isOpera) && !!window.CSS; if (isBlink) { return "Blink"; } } catch (err) { if (run_console) { _writeLog(err); } } } function _getLocation(_cfunction, _dom) { try { if (_cfunction === undefined || _cfunction === false) { if (navigator.geolocation) { navigator.geolocation.watchPosition(function(position) { var lotlang = "Latitude : " + position.coords.latitude + ", Longitude : " + position.coords.longitude; if (_dom === undefined) { alert(lotlang); } else { _printTo("" + _dom + "", lotlang); } }, showError); } else { if (run_console) { _writeLog("_getLocation->Browser Not Support Location"); } } return; } else if (_isFunction(_cfunction)) { if (navigator.geolocation) { navigator.geolocation.watchPosition(_cfunction, showError); } else { if (run_console) { _writeLog("_getLocation->Browser Not Support Location"); } } } else { if (run_console) { _writeLog("_getLocation->" + _cfunction + " is not function"); } } } catch (err) { if (run_console) { _writeLog(err); } } function showError(error) { if (run_console) { switch (error.code) {case error.PERMISSION_DENIED: _writeLog("User denied the request for Geolocation."); break; case error.POSITION_UNAVAILABLE: _writeLog("Location information is unavailable."); break; case error.TIMEOUT: _writeLog("The request to get user location timed out."); break; case error.UNKNOWN_ERROR: _writeLog("An unknown error occurred."); break; } } } } function _writeAlert(id_message, message, type) { var psan = '<div class="alert alert-' + type + ' alert-dismissible fade in" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>' + message + '</div>'; _printTo(id_message, psan); } function _animation(_id, _text, _type) { try { if (_id === undefined) { if (run_console) { _writeLog("_loadAnimate->" + _error_message.id); } return; } if (_text === undefined) { if (run_console) { _writeLog("_loadAnimate-> Text Animate Null"); _text = ""; } } if (_type === undefined) { if (run_console) { _writeLog("_loadAnimate-> Set default animate fa fa spinner"); } _type = '<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i>'; } if (_type === 'refresh') { _type = '<i class="fa fa-refresh fa-spin fa-3x fa-fw"></i>'; } if (_type === 'spinner') { _type = '<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i>'; } if (_type === 'circle') { _type = '<i class="fa fa-circle-o-notch fa-spin fa-3x fa-fw"></i>'; } _printTo(_id, "<center><h4>" + _type + '' + _text + '</h4></center>'); } catch (err) { if (run_console) { _writeLog(err); } } } function _valueInput(o, c) {try {if (o === undefined) {if (run_console) {_writeLog("_valueInput -> " + _error_message.id); } return; } if (c === undefined) {if (run_console) {_writeLog("_valueInput-> " + _error_message.val); } c = ""; } if (_getById(o)) {_getById(o).value = "" + c + ""; } else {if (run_console) {_writeLog("_valueInput -> "+_error_message.content); } } } catch (err) { if (run_console) { _writeLog("_valueInput -> "+err); } } } function _setValue(o, v) {try {if (o === undefined) {if (run_console) {_writeLog("_setValue -> " + _error_message.id); } return; } if (v === undefined) {if (run_console) {_writeLog("_setValue -> " + _error_message.val_n + " set default to empty"); } v = null; } var obj = _getById(o); if (obj) {obj.value = v; return obj; } else {if (run_console) {_writeLog("_setValue -> "+_error_message.obj); } return false; } } catch (err) {if (run_console) {_writeLog("_setValue -> "+err); } } } function _openUrl(u) {try {if (u === undefined) {if (run_console) {_writeLog("_openUrl -> "+_error_message.url); } return; } if (_isUrl(u)) {window.location.href = u; } else {if (run_console) {_writeLog("_openUrl -> "+_error_message.url_n); } } } catch (err) { if (run_console) { _writeLog("_openUrl -> "+err); } } } function _confirm(q, y, n) {try {if (q === undefined) {if (run_console) { _writeLog("_confirm -> Question confirmation is nothing"); } return; } if (y === undefined) {if (run_console) { _writeLog("_confirm -> Todo Yes is nothing"); } return; } var r = confirm("" + q + ""); if (n === undefined) {if (r == true) {if (_isFunction(y)) { y(); } else {if (run_console) { _writeLog("_confirm -> " + _error_message.fu); } } } } else {if (r == true) {if (_isFunction(y)) { y(); } else {if (run_console) {_writeLog("_confirm -> " + _error_message.fu); } } } else {if (_isFunction(n)) { n(); } else { if (run_console) { _writeLog("_confirm -> " + _error_message.fu); } } } } } catch (err) { if (run_console) { _writeLog(err); } } } function _removeMe(o) {try {if (o === undefined) {if (run_console) { _writeLog("_removeMe ->" + _error_message.id); } return; } if (_getById(o)) {_getById("" + o + "").style.display = "none"; } else {if (run_console) {_writeLog("_removeMe -> "+_error_message.obj); } } } catch (err) { if (run_console) { _writeLog("_removeMe -> "+err); } } } function _isHidden(o) {try {if (o === undefined) {if (run_console) { _writeLog("_isHidden ->" + _error_message.id); } return; } if (_getById(o)) {var get = _getById(o).style.visibility; if (get === 'hidden') {if (run_console) {_writeLog(get); } return true; } else {if (run_console) { _writeLog(get); } return false; } } else {if (run_console) {_writeLog("_isHidden -> " + _error_message.obj); } } } catch (err) { if (run_console) { _writeLog("_isHidden -> " + err); } } } function _showMe(o, t) {try {if (o === undefined) {if (run_console) { _writeLog("_showMe ->" + _error_message.id); } return; } if (_getById(o)) {_getById("" + o + "").style.visibility = "block"; } else {if (run_console) {_writeLog("_showMe -> " + _error_message.obj); } } } catch (err) { if (run_console) { _writeLog("_showMe -> "+err); } } } function _baseUrl() { try { return document.baseURI; } catch (err) { if (run_console) { _writeLog(err); } } } function _getAllCookie() { try { return document.cookie; } catch (err) { if (run_console) { _writeLog(err); } } } function _getTitle() { try { return document.title; } catch (err) { if (run_console) { _writeLog(err); } } } function _getDomain() { try { return document.domain; } catch (err) { if (run_console) { _writeLog(err); } } } function _countImage() { try { return document.images.length; } catch (err) { if (run_console) { _writeLog(err); } } } function _countLink() { try { return document.links.length; } catch (err) { if (run_console) { _writeLog(err); } } } function _countForm() { try { return document.forms.length; } catch (err) { if (run_console) { _writeLog("_countForm -> "+err); } } } function _hideMe(o) {try {if (o === undefined) {if (run_console) { _writeLog("_hideMe ->" + _error_message.id); } return; } if (_getById(o)) {_getById("" + o + "").style.visibility = "hidden"; } else {if (run_console) {_writeLog("_hideMe -> "+_error_message.obj); } } } catch (err) { if (run_console) { _writeLog("_hideMe -> "+err); } } } function _onClick(o, fu) { try { if (o === undefined) { if (run_console) { _writeLog("_onClick ->" + _error_message.id); } return; } if (fu === undefined) { if (run_console) { _writeLog("_onClick -> " + _error_message.fu_n); } return; } if (_isFunction(fu)) { var obj = _getById(o); if (obj) { obj.onclick = function() { if (obj.innerHTML) { fu(obj.innerHTML, obj); } else if (obj.value) { fu(obj.value, obj); } }; } else { if (run_console) { _writeLog("_onClick -> " + _error_message.obj); } } } else { if (run_console) { _writeLog("_onClick -> " + _error_message.fu); } } } catch (err) { if (run_console) { _writeLog("_onClick -> " + err); } } } function _setImage(o, img) { try { if (o === undefined) { if (run_console) { _writeLog("_setImage ->" + _error_message.id); } return; } if (img === undefined) { if (run_console) { _writeLog("_setImage -> Image is nothing"); } return; } if (_getById(o)) { _getById("" + o + "").src = "" + img + ""; } else { if (run_console) { _writeLog("_setImage -> " + _error_message.obj); } } } catch (err) { if (run_console) { _writeLog(err); } } } function _refresh(u) {try {if (u === undefined) {window.location.href = ''; return; } if (_isUrl(u)) { window.location.href = u; } else {if (run_console) { _writeLog("_refresh -> " + _error_message.url_n); } } } catch (err) {if (run_console) { _writeLog("_refresh -> " + err); } } } var flat_ui_color = { wet_asphalt: "#34495e", midnight_blue: "#2c3e50", concrete: "#95a5a6", asbestos: "#7f8c8d", turqoise: "#1abc9c", green_sea: "#16a085", peter_river: "#3498db", belize_hole: "#2980b9", amethyst: "#9b59b6", wisteria: "#8e44ad", alizarian: "#e74c3c", pomegranate: "#c0392b", clouds: "#ecf0f1", silver: "#bdc3c7", carrot: "#e67e22", pumpkin: "#d35400", sun_flower: "#f1c40f", orange: "#f39c12", emerald: "#2ecc71", nephritis: "#27ae60" }; function _qSelectorBackgroundCol(o, c) {try {if (o === undefined) { if (run_console) { _writeLog("_qSelectorBackgroundCol -> Class of element is undefined"); } return; } if (c === undefined) {if (run_console) { _writeLog("_qSelectorBackgroundCol -> Color is undefined set default to " + flat_color.alizarian); } c = flat_color.alizarian; } var obj =  document.querySelector("" + o + "").style.backgroundColor = c; if (run_console) {_writeLog("_qSelectorBackgroundCol -> "+obj); } return obj; } catch (err) {if (run_console) { _writeLog("_qSelectorBackgroundCol -> " + err); } } } function _qSelectorHTML(o, v) {try {if (o === undefined) { if (run_console) { _writeLog("_qSelectorHTML -> " + _error_message.id); } return; } if (v === undefined) { if (run_console) { _writeLog("_qSelectorHTML -> " + _error_message.val); } return; } var obj = document.querySelector("" + o + "").innerHTML = v; if (run_console) {_writeLog("_qSelectorHTML -> "+obj); } return obj; } catch (err) {if (run_console) { _writeLog("_qSelectorHTML -> " + err); } } } function _onKeyUp(o, fu) {try {if (o === undefined) {if (run_console) { _writeLog("_onKeyUp -> " + _error_message.id); return; } } if (fu === undefined) {if (run_console) { _writeLog("_onKeyUp -> "+_error_message.fu_n); return; } } if (_isFunction(fu) == false) {if (run_console) { _writeLog("_onKeyUp -> " + fu + " is not a function"); return; } } if (_getById(o)) {_getById("" + o + "").addEventListener("keyup", fu); } else {if (run_console) {_writeLog("_onKeyUp -> "+_error_message.obj); } } } catch (err) {if (run_console) { _writeLog("_onKeyUp -> " + err); } } } function _onKeyDown(o, fu) {try {if (o === undefined) {if (run_console) { _writeLog("_onKeyDown -> " + _error_message.id); return; } } if (fu === undefined) { if (run_console) { _writeLog("_onKeyDown -> "+_error_message.fu_n); return; } } if (_isFunction(fu) == false) { if (run_console) { _writeLog("_onKeyDown -> " + fu + " is not a function"); return; } } if (_getById(o)) {_getById("" + o + "").addEventListener("keydown", fu); } else {if (run_console) {_writeLog("_onKeyDown -> "+_error_message.obj); } } } catch (err) { if (run_console) { _writeLog("_onKeyDown -> " + err); } } } function _previewImage(o, im) {try {if (o === undefined) { if (run_console) { _writeLog("_previewImage -> id of input file is undefined"); return; } } if (im === undefined) { if (run_console) { _writeLog("_previewImage -> id of image is undefined"); return; } } if (_getById(o)) {_getById("" + o + "").onchange = function() {var r = new FileReader(); r.onload = function(e) {_getById("" + im + "").src = e.target.result; _getById(im).src = e.target.result; }; r.readAsDataURL(this.files[0]); }; } else {if (run_console) {_writeLog("_previewImage -> "+_error_message.obj); } } } catch (err) { if (run_console) { _writeLog("_previewImage -> " + err); } } } function _getExtensionFile(o) {if (o === undefined) {if (run_console) { _writeLog("_getExtensionFile-> " + _error_message.id); } return; } try {return o.value.split('.')[1].toLowerCase(); } catch (err) {if (run_console) { _writeLog("_getExtensionFile -> " + err); } } } function _myUrl() {try {var b = window.location.origin; var n = b.search("localhost"); if (n === -1) {return b + "/"; } else {var url = window.location.pathname.split('/', 2); var ns = b + url; var nu = ns.replace(",", "/"); return nu + "/"; } } catch (Err) { if (run_console) { _writeLog("_myUrl -> " + Err); } } } function _getYear() { return _obj_d.getFullYear(); } function _getDay() { return _obj_d.getDay(); } function _getMonth() { return _obj_d.getMonth(); } function _getDate(type) { if (type === undefined) { return _getYear() + "/" + _getMonth() + "/" + _getDay(); } else { return _getYear() + type + _getMonth() + type + _getDay(); } } function _getDayName(type) { if (type === undefined) { var d = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]; return d[_getDay()]; } else { var d = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]; return d[_getDay()]; } } function _getMonthName(type) { if (type === undefined) { var d = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]; return d[_getMonth()]; } else { var d = ["Januari", "Februari", "Maret", "April", "Met", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]; return d[_getMonth()]; } } function _getTime() { return _obj_d.toLocaleTimeString(); } function _cYposition() { if (self.pageYOffset) return self.pageYOffset; if (document.documentElement && document.documentElement.scrollTop) return document.documentElement.scrollTop; if (document.body.scrollTop) return document.body.scrollTop; return 0; } function _elmPosition(eID) { var elm = _getById(eID); var y = elm.offsetTop; var node = elm; while (node.offsetParent && node.offsetParent != document.body) { node = node.offsetParent; y += node.offsetTop; } return y; } function _scroll(eID) {var startY = _cYposition(); var stopY = _elmPosition(eID); var distance = stopY > startY ? stopY - startY : startY - stopY; if (distance < 100) { scrollTo(0, stopY); return; } var speed = Math.round(distance / 100); if (speed >= 20) speed = 20; var step = Math.round(distance / 25); var leapY = stopY > startY ? startY + step : startY - step; var timer = 0; if (stopY > startY) {for (var i = startY; i < stopY; i += step) {setTimeout("window.scrollTo(0, " + leapY + ")", timer * speed); leapY += step; if (leapY > stopY) leapY = stopY; timer++; } return; } for (var i = startY; i > stopY; i -= step) {setTimeout("window.scrollTo(0, " + leapY + ")", timer * speed); leapY -= step; if (leapY < stopY) leapY = stopY; timer++; } } function _import(p) {if (p === undefined) {if (run_console) { _writeLog("_import -> path file is not defined"); } return; } try {var e = window.document.createElement('script'); e.setAttribute('src', p); var res = window.document.body.appendChild(e); if (run_console) {_writeLog("_import -> "+ res); } return res; } catch (e) { if (run_console) { _writeLog("_import -> " + e); } } } var _keyCode = { space_bar: 32, backspace: 8, clear: 12, tab: 9, ctrl: 17, enter: 13, alt: 18, caps_lock: 20, escape: 27, shift: 16, home: 36, end: 35, insert: 45, delete: 46, f1: 112, f2: 113, f3: 114, f4: 115, f5: 116, f6: 117, f7: 118, f8: 119, f9: 120, f10: 121, f11: 122, f12: 123, semi_colon: 186, comma: 188, num_lock: 144, minus: 173, win_menu: 93, add: 107, divide: 111, next: 176, previous: 177, left: 37, right: 39, up: 38, down: 40 }; function _keyArrow(fl, fr, fu, fd) {try {document.addEventListener('keydown', function(event) {if (fl) {if (event.keyCode == _keyCode.left) {fl(); } } if (fr) {if (event.keyCode == _keyCode.right) {fr(); } } if (fu) {if (event.keyCode == _keyCode.up) {fu(); } } if (fd) {if (event.keyCode == _keyCode.down) {fd(); } } }, true); } catch (e) {if (run_console) {_writeLog("_keyArrow-> " + e); } } } function _keyCustom(fc, kc) {try {if (kc === undefined) {kc = _keyCode.space_bar; if (run_console) { _writeLog("_keyCustom -> Key code is not defined set default 32 Space Bar"); } } if (run_console) {_writeLog("_keyCustom -> "+kc); } if (_isFunction(fc)) {document.addEventListener('keydown', function(event) { if (event.keyCode == kc) { fc(); } }, true); } else {return false; } } catch (e) {if (run_console) { _writeLog("_keyCustom -> " + e); } } } class _gData {constructor(id_obj, attr_obj, val_obj) {this.id_obj = id_obj; this.attr_obj = attr_obj; this.val_obj = val_obj; } rGet_ID() { var o = _getById(this.id_obj); if (o) { return o.getAttribute(this.attr_obj); } else { return false; } } rGet_Tag() {var o = document.getElementsByTagName(this.id_obj)[0]; if (o) { return o.getAttribute(this.attr_obj); } else { return false; } } setData() { var o = _getById(this.id_obj); if (o) { o.setAttribute(this.attr_obj, this.val_obj); } else { return false; } } get dataById() { return this.rGet_ID(); } get dataByTag() { return this.rGet_Tag(); } } function _onKeyUpToText(o, o_d, fu) {try {if (o === undefined) { if (run_console) { _writeLog("_onKeyUpToText -> " + _error_message.id); return; } } if (o_d === undefined) {if (run_console) { _writeLog("_onKeyUpToText -> " + _error_message.id); return; } } if (_isFunction(fu)) {_getById("" + o + "").addEventListener("keyup", function() { fu(o_d, _getValById(o)); }); } else {if (_getById(o)) {_getById("" + o + "").addEventListener("keyup", function() { _printTo(o_d, _getValById(o)); }); } else {if (run_console) {_writeLog("_onKeyUpToText -> "+_error_message.obj); } } } } catch (err) {if (run_console) { _writeLog("_onKeyUpToText -> " + err); } } } function _drawCircle(id_obj, xCenter, yCenter, d) { try { if (id_obj === undefined) { if (run_console) _writeLog("_drawCircle->" + _error_message.cnvs); return; } if (xCenter === undefined) { if (run_console) { _writeLog("_drawCircle->X Center is not defined, set to 60"); } xCenter = 60; } if (yCenter === undefined) { if (run_console) { _writeLog("_drawCircle->Y Center is not defined, set to 60"); } yCenter = 60; } if (d === undefined) { if (run_console) { _writeLog("_drawCircle->d (diameter) is not defined, set to 50"); } d = 50; } var ctx = _getById(id_obj).getContext("2d"); ctx.beginPath(); ctx.arc(xCenter, yCenter, d, 0, 2 * Math.PI); ctx.stroke(); } catch (err) { if (run_console) { _writeLog("_drawCircle->" + err); } } } function _drawText(id_obj, text, font, sX, sY) { try { if (id_obj === undefined) { if (run_console) _writeLog("_drawText->" + _error_message.cnvs); return; } if (text === undefined) { text = "Hello World"; } if (font === undefined) { font = "30px Arial"; } if (sX === undefined) { sX = 30; } if (sY === undefined) { sY = 30; } var ctx = _getById(id_obj).getContext("2d"); ctx.font = font; ctx.strokeText(text, sX, sY); } catch (err) { if (run_console) { _writeLog("_drawCircle->" + err); } } } function _drawLine(id_obj, xLine, yLine, xPost, yPost, ctx) { try { if (id_obj === undefined) { if (run_console) _writeLog("_drawLine->" + _error_message.cnvs); return; } if (xLine === undefined) { xLine = 200; } if (yLine === undefined) { yLine = 200; } if (xPost === undefined) { xPost = 0; } if (yPost === undefined) { yPost = 0; } if (ctx === undefined) { ctx = "2d"; } var ctx = _getById(id_obj).getContext(ctx); ctx.moveTo(xPost, yPost); ctx.lineTo(xLine, yLine); ctx.stroke(); } catch (err) { if (run_console) { _writeLog("_drawLine->" + err); } } } function _drawImage(id_canvas, id_image, cX, cY) { try { if (id_canvas === undefined) { if (run_console) { _writeLog("_drawImage->" + _error_message.cnvs); } return; } if (id_image === undefined) { if (run_console) { _writeLog("_drawImage->id of image is undefined"); } return; } if (cX === undefined) { cX = 10; } if (cY === undefined) { cY = 10; } var ctx = _getById(id_canvas).getContext("2d"); var img = _getById(id_image); ctx.drawImage(img, cX, cY); } catch (err) { if (run_console) _writeLog("_drawImage->" + err); } } function _clearCanvas(id_canvas) { try { if (id_canvas === undefined) { if (run_console) _writeLog("_clearCanvas->" + _error_message.cnvs); return; } var c = _getById(id_canvas); ctx = c.getContext("2d"); ctx.clearRect(0, 0, c.width, c.height); } catch (err) { if (run_console) _writeLog("_clearCanvas->" + err); } } function _onDClick(o, fu) { try { if (o === undefined) { if (run_console) { _writeLog("_onDoubleClick->" + _error_message.id); return; } } if (fu === undefined) { if (run_console) { _writeLog("_onDoubleClick -> " + _error_message.fu_n); return; } } if (_isFunction(fu)) { var obj = _getById(o); if (obj) { obj.ondblclick = function() { if (obj.innerHTML) { fu(obj.innerHTML, obj); } else if (obj.value) { fu(obj.value, obj); } }; } else { if (run_console) { _writeLog("_onDoubleClick -> " + _error_message.obj); } } } else { if (run_console) { _writeLog("_onDoubleClick -> " + _error_message.fu); } } } catch (err) { if (run_console) { _writeLog("_onDoubleClick -> " + err); } } } function _writeBody(v) { if (v) { var obj = document.body.innerHTML = v; return obj; } else { if (run_console) { _writeLog("_writeBody -> " + _error_message.val); } } } function _isArray(arr) { if (arr) { if (Object.prototype.toString.call(arr) === '[object Array]') { return true; } else { return false; } } else { if (run_console) { _writeLog("_isArray->" + _error_message.val); } } } function _addList(o, c, v, type) { try { if (o === undefined) { if (run_console) { _writeLog("_addList->" + _error_message.id); } return; } if (c === undefined) { c = "list-group"; if (run_console) { _writeLog("_addList->" + _error_message.class); } } if (v === undefined) { if (run_console) { _writeLog("_addList->" + _error_message.val); } return; } var current_val = _getById(o).innerHTML; var r = ""; if (_isArray(v)) { for (var i = 0; i < v.length; i++) { r += '<div id=' + v[i] + '>' + _componentHTML.li_open + c + "'>" + v[i] + _componentHTML.li_close + "</div>"; } } else { r = '<div id=' + v + '>' + _componentHTML.li_open + c + "'>" + v + _componentHTML.li_close + "</div>"; } if (type === undefined) { if (current_val) { _printTo(o, current_val + r); } } else { _printTo(o, r); } } catch (err) { if (run_console) { _writeLog("_addList->" + err); } } } function _textStyle(o, style) { try { if (o === undefined) { if (run_console) { _writeLog("_textStyle->" + _error_message.id); } return; } if (_isArray(style)) { var obj = _getById(o); if (style[0]) { obj.style.fontStyle = style[0]; } if (style[1]) { obj.style.fontSize = style[1]; } if (style[2]) { obj.style.textAlign = style[2]; } if (style[3]) { obj.style.color = style[3]; } if (style[4]) { obj.style.fontVariant = style[4]; } } } catch (err) { if (run_console) { _writeLog("_textStyle->" + err); } } } var _increment_item_table = 0; function _addItemTable(o, v, type) { try { if (o === undefined) { if (run_console) { _writeLog("_addTable->" + _error_message.id); } return; } if (v === undefined) { if (run_console) { _writeLog("_addTable->" + _error_message.val); } return; } var r = _componentHTML.tr_open + _increment_item_table + "'>"; var current_val = _getById(o).innerHTML; if (_isArray(v)) { for (i = 0; i < v.length; i++) { r += _componentHTML.td_open + v[i] + _componentHTML.td_close; } } if (type === undefined) { if (current_val) { _printTo(o, current_val + r + _componentHTML.tr_close); } _increment_item_table++; } else { _printTo(o, r + _componentHTML.tr_close); _increment_item_table++; } } catch (err) { if (run_console) { _writeLog("_addTable->" + err); } } } function _getLastIncrement() { return _increment_item_table; } function _rightClick(v) { try { document.body.onclick = function(e) { window.oncontextmenu = function() { if (v === undefined) { v = "Sorry, Right Click Disabled"; } if (_isFunction(v)) { v(); } else { alert(v); } return false; } } } catch (err) { if (run_console) { _writeLog("_rightClick->" + err); } } } function _getOption(o, t) { try { if (o === undefined) { if (run_console) { _writeLog("_getValOption->" + _error_message.id); } return; } var obj = _getById(o); if (obj) { if (t === undefined) { return obj.options[obj.selectedIndex].value; } else { return obj.options[obj.selectedIndex].text; } } else { if (run_console) _writeLog("_getValOption->" + _error_message.obj); } } catch (err) { if (run_console) { _writeLog("_getValOption->" + err); } } } function _addOption(o, v, val_text) { try { if (o === undefined) { if (run_console) { _writeLog("_addOption->" + _error_message.id); } return; } var obj = _getById(o); if (obj) { v = (v == undefined) ? "VALUE" : v; var curr = obj.innerHTML; var tmp = ''; if (_isArray(v)) { if (_isArray(val_text)) { for (var i = 0; i < v.length; i++) { vT = (val_text[i]) ? (val_text[i]) : false; vI = (v[i]) ? (v[i]) : "ID" + i; tmp += '<div id="' + vI + i + '">' + _componentHTML.option_open + vI + "'>" + vT + _componentHTML.option_close + "</div>"; } tmp = curr + tmp; } else { for (var i = 0; i < v.length; i++) { vI = (v[i]) ? (v[i]) : "ID" + i; tmp += '<div id="' + vI + i + '">' + _componentHTML.option_open + vI + "'>" + vI + _componentHTML.option_close + "</div>"; } tmp = curr + tmp; } } else { if (val_text === undefined) { val_text = v; } if (curr) { tmp = curr + '<div id="' + v + '">' + _componentHTML.option_open + v + "'>" + val_text + _componentHTML.option_close + "</div>"; } else { tmp = '<div id="' + v + '">' + _componentHTML.option_open + v + "'>" + val_text + _componentHTML.option_close + "</div>"; } } _printTo(o, tmp); } else { if (run_console) { _writeLog("_addOption->" + _error_message.obj); } } } catch (err) { if (run_console) { _writeLog("_addOption->" + err); } } } function _selectText(o) { if (o === undefined) { if (run_console) { _writeLog("_selectText->" + _error_message.id); } return; } var obj = _getById(o); if (obj) { obj.select(); } else { if (run_console) { _writeLog("_selectText->" + _error_message.obj); } } } function _print(o, w, h) {var otp; if (o === undefined) {if (run_console) { _writeLog("_print -> " + _error_message.id); } otp = document.body.innerHTML;; } else if (_getById(o)) {otp = _getById(o).innerHTML; } if (w === undefined) { w = 500; } if (h === undefined) { h = 500; } var wnd = window.open('', 'PRINT', 'height=' + h + ',width=' + w); wnd.document.write('<html><head><title>' + _getTitle() + '</title>'); wnd.document.write('</head><body >'); wnd.document.write('<h1>' + _getTitle() + '</h1>'); wnd.document.write(otp); wnd.document.write('</body></html>'); wnd.document.close(); wnd.focus(); wnd.print(); wnd.close(); return true; } function _onChange(id_obj, fu) { try { if (id_obj === undefined) { if (run_console) { _writeLog("_onChange -> " + _error_message.id); } return false; } if (_getById(id_obj)) { if (_isFunction(fu)) { _getById(id_obj).onchange = function() { fu() }; } } else { if (run_console) { _writeLog("_onChange -> " + _error_message.obj); } return false; } } catch (err) { if (run_console) { _writeLog("_onChange ->" + err); } } } function _onLoad(id_obj, fu) { try { if (id_obj === undefined) { if (run_console) { _writeLog("_onLoad -> " + _error_message.id); } return false; } if (_getById(id_obj)) { if (_isFunction(fu)) { _getById(id_obj).onload = function() { fu() }; } } else { if (run_console) { _writeLog("_onLoad -> " + _error_message.obj); } return false; } } catch (err) { if (run_console) { _writeLog("_onLoad ->" + err); } } } function _onPageShow(id_obj, fu) { try { if (id_obj === undefined) { if (run_console) { _writeLog("_onPageShow -> " + _error_message.id); } return false; } if (_getById(id_obj)) { if (_isFunction(fu)) { _getById(id_obj).onpageshow = function() { fu() }; } } else { if (run_console) { _writeLog("_onPageShow -> " + _error_message.obj); } return false; } } catch (err) { if (run_console) { _writeLog("_onPageShow ->" + err); } } } function _onDrag(id_obj, fu) { try { if (id_obj === undefined) { if (run_console) { _writeLog("_onDrag -> " + _error_message.id); } return false; } if (_getById(id_obj)) { if (_isFunction(fu)) { _getById(id_obj).ondrag = function() { fu() }; } } else { if (run_console) { _writeLog("_onDrag -> " + _error_message.obj); } return false; } } catch (err) { if (run_console) { _writeLog("_onDrag ->" + err); } } } function _onDrop(id_obj, fu) { try { if (id_obj === undefined) { if (run_console) { _writeLog("_onDrop -> " + _error_message.id); } return false; } if (_getById(id_obj)) { if (_isFunction(fu)) { _getById(id_obj).ondrop = function() { fu() }; } } else { if (run_console) { _writeLog("_onDrop -> " + _error_message.obj); } return false; } } catch (err) { if (run_console) { _writeLog("_onDrop ->" + err); } } } function _allowDrop(e) { try { if (e) { e.preventDefault(); } else { if (run_console) { _writeLog("_allowDrop -> Should be an event !"); } } } catch (err) { if (run_console) _writeLog("_allowDrop -> " + err); } } function _onResize(fu) { try { if (fu === undefined) { if (run_console) { _writeLog("_onResize -> " + _error_message.fu); } return; } if (_isFunction(fu)) { document.body.onresize = function() { if (run_console) { _writeLog("_onResize -> " + window.outerWidth + "," + window.outerHeight); } fu(window.outerWidth, window.outerHeight); }; } else { if (run_console) { _writeLog("_onResize -> " + _error_message.fu); } } } catch (err) { if (run_console) { _writeLog("_onFocus -> " + err); } } } function _newIframe(src, w, h, id) { if (src === undefined) { if (run_console) { _writeLog("_newIframe-> Source is undefined"); } return; } if (_isUrl(src) === false) { if (run_console) { _writeLog("_newIframe -> " + _error_message.url_n); } return; } if (w === undefined) { if (run_console) { _writeLog("_newIframe-> Width is undefined set to 400"); } w = 400; } if (h === undefined) { if (run_console) { _writeLog("_newIframe-> Height is undefined set to 400"); } h = 400; } if (id === undefined) { if (run_console) { _writeLog("_newIframe-> " + _error_message.id + ", render iframe to document write"); } _docWrite('<div id="iframe1"><iframe src="' + src + '" height="' + w + '" width="' + h + '"></iframe></div>'); return "iframe1"; } else if (_getById(id)) { _printTo(id, '<div id="iframe1"><iframe src="' + src + '" height="' + w + '" width="' + h + '"></iframe></div>'); return "iframe1"; } else { if (run_console) { _writeLog("_newIframe-> " + _error_message.obj); } } } function _newTab(u) { if (u) { if (_isUrl(u)) { var wnd = window.open(u); return wnd; } else { if (run_console) { _writeLog("_newTab -> " + _error_message.url); } } } else { if (run_console) { _writeLog("_newTab -> Url is not defined"); } } } function _onFocus(o, fu) { try { if (o === undefined) { if (run_console) { _writeLog("_onFocus -> " + _error_message.id); } return; } if (_getById(o)) { var obj = _getById(o); obj.onfocus = function() { if (obj.innerHTML) { fu(obj.innerHTML, obj); } else if (obj.value) { fu(obj.value, obj); } }; } else { if (run_console) { _writeLog("_onFocus -> " + _error_message.obj); } } } catch (err) { if (run_console) { _writeLog("_onFocus -> " + err); } } } function _onMouseDown(o, fu) { if (o === undefined) { if (run_console) { _writeLog("_onMouseDown -> " + _error_message.id); } return; } if (_getById(o)) { var obj = _getById(o); obj.onmousedown = function() { if (obj.innerHTML) { fu(obj.innerHTML, obj); } else if (obj.value) { fu(obj.value, obj); } }; } else { if (run_console) { _writeLog("_onMouseDown -> " + _error_message.obj); } } } function _onMouseOver(o, fu) { try { if (o === undefined) { if (run_console) { _writeLog("_onMouseOver -> " + _error_message.id); } return; } if (_getById(o)) { var obj = _getById(o); obj.onmouseover = function() { if (obj.innerHTML) { fu(obj.innerHTML, obj); } else if (obj.value) { fu(obj.value, obj); } }; } else { if (run_console) { _writeLog("_onMouseOver -> " + _error_message.obj); } } } catch (err) { if (run_console) { _writeLog("_onMouseOver -> " + err); } } } function _onMouseOut(o, fu) { if (o === undefined) { if (run_console) { _writeLog("_onMouseOut -> " + _error_message.id); } return; } if (_getById(o)) { var obj = _getById(o); obj.onmouseout = function() { if (obj.innerHTML) { fu(obj.innerHTML, obj); } else if (obj.value) { fu(obj.value, obj); } }; } else { if (run_console) { _writeLog("_onMouseOut -> " + _error_message.obj); } } } function _cleanArray(arr,v,w,x) {if (arr===undefined) {return false; } if (v===undefined) {v=null; } if (run_console) {_writeLog("_cleanArray -> Array : "+arr); _writeLog("_cleanArray -> Filter : "+ v + "," + (w ? w : '') + ","+ (x ? x : '')); _writeLog("_cleanArray -> Parameter Filter Maximum is 3",1); } if(_isArray(arr)) {for (var i = 0; i < arr.length; i++) {if (arr[i] == v) {arr.splice(i, 1); i--; } if (w) {if (arr[i] == w) {arr.splice(i, 1); } } if (x) {if (arr[i] == x) {arr.splice(i, 1); } } } return arr; } else {return false; } }