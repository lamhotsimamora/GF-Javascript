var run_console = false; 
var __data_angka = new Array("1", "2", "3", "4", "5", "6", "7", "8", "9", "0"); var __data_huruf = new Array("?", "$", "*", "~", "!", "^", "%", ">", "-", "|"); var _protocol; var _host; function _getHost() { _protocol = window.location.protocol + "//"; _host = window.location.host + "/"; return _protocol + _host; } function _printTo(dom, content) {try {if (dom === undefined) {if (run_console) { _writeLog("_printTo->Id of Object is nothing"); } return; } if (content === undefined) {if (run_console) { _writeLog("_printTo->Id Of Object is nothing"); } return; } document.getElementById("" + dom + "").innerHTML = content; } catch (err) {if (run_console) { _writeLog(err); } } } function _clear(dom) {try {if (dom === undefined) {if (run_console) { _writeLog("_clear->Id of Object is nothing"); } return; } var __clear = ''; document.getElementById("" + dom + "").value = "" + __clear + ""; } catch (err) {if (run_console) { _writeLog(err); } } } function _focus(dom) {try {if (dom === undefined) {if (run_console) { _writeLog("_focus->Id of Object is nothing"); } return; } document.getElementById("" + dom + "").focus(); } catch (err) {if (run_console) { _writeLog(err); } } } function _getIdByName(_name) {try {if (_name === undefined) {if (run_console) { _writeLog("_getIdByName->Name of Object is nothing"); } return; } var getId = document.getElementsByName("" + _name + ""); return getId; } catch (err) {if (run_console) { _writeLog(err); } } } function _getNameById(_id) {try {if (_getNameById === undefined) {if (run_console) { _writeLog("_getNameById->Id of Object is nothing"); } return; } var getName = document.getElementById("" + _id + "").name; return getName; } catch (err) {if (run_console) { _writeLog(err); } } } function _getValById(_id) {try {if (_id === undefined) {if (run_console) { _writeLog("_getValById->Id of Object is nothing"); } return; } if (document.getElementById("" + _id + "").value === '') {return document.getElementById("" + _id + "").value; } else {var _value = document.getElementById("" + _id + "").value.trim(); return _value; } } catch (err) {if (run_console) { _writeLog(err); } } } function _getValByName(_name, _index) {try {if (_index === undefined) {if (run_console) { _writeLog("_getValByName->Index of Object is nothing set default->0"); } _index = 0; } if (_name === undefined) {if (run_console) { _writeLog("_getValByName->Name of Object is nothing"); } return; } if (document.getElementsByName("" + _name + "")[_index].value === '') {return document.getElementsByName("" + _name + "")[_index].value; } else {var _value = document.getElementsByName("" + _name + "")[_index].value.trim(); return _value; } } catch (err) {if (run_console) { _writeLog(err); } } } function _docWrite(_value) {try {if (_value === undefined) {if (run_console) { _writeLog("_docWrite->Value is nothing"); } return; } document.write(_value); } catch (err) {if (run_console) { _writeLog(err); } } } function _colorFont(_str, _getColour) {if (_getColour === undefined) {return "<font color='#e74c3c'>" + _str + "</font>"; } else {return "<font color='" + _getColour + "'>" + _str + "</font>"; } } function _newForm(_content, _url) {try {if (_content === undefined) {if (run_console) { _writeLog("_newForm->Value Is Not Found"); } return; } if (_url === undefined) {var myWindow = window.open("", "", "width=500,height=500"); myWindow.document.write(_content); myWindow.focus(); } else {var myWindow = window.open(_url, "", "width=500,height=500"); myWindow.focus(); } } catch (err) {if (run_console) { _writeLog(err); } } } function _isFunction(functionToCheck) {var getType = {}; return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]'; } function _writeLog(_value, _type) {var color_red = "#e74c3c"; var color_green = "#2ecc71"; if (_type === undefined) { console.log("%c " + _value + "", 'background: #ffffff; color: ' + color_red); } else if (_type === false) { console.log("%c " + _value + "", 'background: #ffffff; color: ' + color_green); } else { console.log("%c " + _value + "", 'background: #ffffff; color: ' + _type); } } function _loadDoc(_url, _callbackFunctionOrContent) {try {if (_url === undefined) {if (run_console) { _writeLog("_loadFrom->URL Is Not Found"); } return; } if (_callbackFunctionOrContent === undefined) {if (run_console) { _writeLog("_loadDoc->Create Function Call Back Or Your Id Object"); } return; } if (window.XMLHttpRequest) { xhttp = new XMLHttpRequest(); } else { xhttp = new ActiveXObject("Microsoft.XMLHTTP"); } xhttp.onreadystatechange = function() {if (this.readyState == 0) {if (run_console) { _writeLog("_loadDoc -> Object is not initialized"); } return false; } if (this.readyState == 1) {if (run_console) { _writeLog("_loadDoc -> Start Load data"); } } if (this.readyState == 2) {if (run_console) { _writeLog("_loadDoc -> Finish Load Data"); } } if (this.status == 202) {if (run_console) { _writeLog("_loadDoc -> Request is process"); } } if (this.status == 203) {if (run_console) { _writeLog("_loadDoc -> Request is denied ! Header of request is not come from original server !"); } return false; } if (this.readyState == 4 && this.status == 200) {if (_isFunction(_callbackFunctionOrContent)) { _callbackFunctionOrContent(this.responseText); if (run_console) { _writeLog("_loadDoc->Run Function Call Back " + _callbackFunctionOrContent, false); } } else { _printTo(_callbackFunctionOrContent, this.responseText); if (run_console) { _writeLog("_loadDoc->Success load document", false); } } } }; xhttp.open("GET", _url, true); xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); xhttp.send(); } catch (err) {if (run_console) { _writeLog(err); } } } function _requestPOST(_URL, _Paramater, _callbackFunctionOrContent) {try {if (_URL === undefined) {if (run_console) { _writeLog("_requestPOST->URL Is Not Found"); } return; } if (_Paramater === undefined) {if (run_console) { _writeLog("_requestPOST->Parameter POST Is Not Found"); } return; } if (_callbackFunctionOrContent === undefined) {if (run_console) { _writeLog("_requestPOST->Create Function Call Back Or Your Id Object"); } return; } if (window.XMLHttpRequest) { xhttp = new XMLHttpRequest(); } else { xhttp = new ActiveXObject("Microsoft.XMLHTTP"); } xhttp.onreadystatechange = function() {if (this.readyState == 0) {if (run_console) { _writeLog("_requestPOST -> Object is not initialized"); } return false; } if (this.readyState == 1) {if (run_console) { _writeLog("_requestPOST -> Start Load data"); } } if (this.readyState == 2) {if (run_console) { _writeLog("_requestPOST -> Finish Load Data"); } } if (this.status == 202) {if (run_console) { _writeLog("_requestPOST -> Request is process"); } } if (this.status == 203) {if (run_console) { _writeLog("_requestPOST -> Request is denied ! Header of request is not come from original server !"); } return false; } if (this.readyState == 4 && this.status == 200) {if (_isFunction(_callbackFunctionOrContent)) { _callbackFunctionOrContent(this.responseText); if (run_console) { _writeLog("_requestPOST->Run Function Call Back " + _callbackFunctionOrContent, false); } } else { _printTo(_callbackFunctionOrContent, this.responseText); if (run_console) { _writeLog("_requestPOST->Print Success", false); } } } }; xhttp.open("POST", _escapeHtml(_URL), true); xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); xhttp.send("" + _Paramater + ""); } catch (err) {if (run_console) { _writeLog(err); } } } function _requestGET(_URL, _callbackFunctionOrContent) {try {if (_URL === undefined) {if (run_console) { _writeLog("_requestGET->URL Is Not Found"); } return; } if (_callbackFunctionOrContent === undefined) {if (run_console) { _writeLog("_requestGET->Create Function Call Back Or Your Id Object"); } return; } if (window.XMLHttpRequest) { xmlhttp = new XMLHttpRequest(); } else { xmlhttp = new ActiveXObject("Microsoft.XMLHTTP"); } xmlhttp.onreadystatechange = function() {if (this.readyState == 0) {if (run_console) { _writeLog("_requestGET -> Object is not initialized"); } return false; } if (this.readyState == 1) {if (run_console) { _writeLog("_requestGET -> Start Load data"); } } if (this.readyState == 2) {if (run_console) { _writeLog("_requestGET -> Finish Load Data"); } } if (this.status == 202) {if (run_console) { _writeLog("_requestGET -> Request is process"); } } if (this.status == 203) {if (run_console) { _writeLog("_requestGET -> Request is denied ! Header of request is not come from original server !"); } return false; } if (this.readyState == 4 && this.status == 200) {if (_isFunction(_callbackFunctionOrContent)) { _callbackFunctionOrContent(this.responseText); if (run_console) { _writeLog("_requestGET->Run Function Call Back " + _callbackFunctionOrContent, false); } } else { _printTo(_callbackFunctionOrContent, this.responseText); if (run_console) { _writeLog("_requestGET->Print Success", false); } } } }; xmlhttp.open("GET", "" + _URL + "", true); xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); xmlhttp.send(); } catch (err) {if (run_console) { _writeLog(err); } } } function _randomStr(_length) {try {if (_length === undefined) { _length = 10; } var result = ""; var _char = "a1b2c3d4e5f6g7h8i9j0klmnopqrstuvwxyz"; for (var i = 0; i < _length; i++) result += _char.charAt(Math.floor(Math.random() * _char.length)); if (run_console) { _writeLog("_randomStr->Success Generate Random String", false); } return result; } catch (err) {if (run_console) { _writeLog(err); } } } function _randomInt(_length) {try {var result = ""; var _char = "1234567890"; if (_length === undefined) { _length = 10; } for (var i = 0; i < _length; i++) result += _char.charAt(Math.floor(Math.random() * _char.length)); if (run_console) { _writeLog("_randomInt->Success Generate Random Integer", false); } return result; } catch (err) {if (run_console) { _writeLog(err); } } } function _encryptInt(_value) {try {if (_value === undefined) {if (run_console) { _writeLog("_encryptInt->Value Is Not Found"); } return; } _value = _value.toString(); var length_value = _value.length; var _data = new Array(length_value); for (var i = 0; i < length_value; i++) {var res = _value.substring(i, i + 1); res = _123abc(res); _data[i] = res; } var value_result = _data.toString(); String.prototype.replaceAll = function(target, replacement) {return this.split(target).join(replacement); }; if (run_console) { _writeLog("_encryptInt->Success Encrypt Integer", false); } return value_result.replaceAll(",", "");; function _123abc(_value) {if (_value === __data_angka[9]) {return __data_huruf[2]; } if (_value === __data_angka[7]) {return __data_huruf[4]; } if (_value === __data_angka[5]) {return __data_huruf[6]; } if (_value === __data_angka[3]) {return __data_huruf[8]; } if (_value === __data_angka[0]) {return __data_huruf[1]; } if (_value === __data_angka[1]) {return __data_huruf[3]; } if (_value === __data_angka[2]) {return __data_huruf[5]; } if (_value === __data_angka[4]) {return __data_huruf[7]; } if (_value === __data_angka[6]) {return __data_huruf[9]; } if (_value === __data_angka[8]) {return __data_huruf[0]; } if (run_console) { _writeLog("Value must be integer only -> " + _value); } return _value; } } catch (err) {if (run_console) { _writeLog(err); } } } function _decryptInt(_value) {try {if (_value === undefined) {if (run_console) { _writeLog("_decryptInt->Value Is Not Found"); } return; } var length_value = _value.length; var _data = new Array(length_value); for (var i = 0; i < length_value; i++) {var res = _value.substring(i, i + 1); res = _abc123(res); _data[i] = res; } var value_result = _data.toString(); String.prototype.replaceAll = function(target, replacement) {return this.split(target).join(replacement); }; if (run_console) { _writeLog("_decryptInt->Success Decrypt Integer", false); } return value_result.replaceAll(",", "");; function _abc123(_value) { _value = _value.toUpperCase(); if (_value === __data_huruf[2]) {return __data_angka[9]; } if (_value === __data_huruf[4]) {return __data_angka[7]; } if (_value === __data_huruf[6]) {return __data_angka[5]; } if (_value === __data_huruf[8]) {return __data_angka[3]; } if (_value === __data_huruf[1]) {return __data_angka[0]; } if (_value === __data_huruf[3]) {return __data_angka[1]; } if (_value === __data_huruf[5]) {return __data_angka[2]; } if (_value === __data_huruf[7]) {return __data_angka[4]; } if (_value === __data_huruf[9]) {return __data_angka[6]; } if (_value === __data_huruf[0]) {return __data_angka[8]; } if (run_console) { _writeLog("Key not found " + _value); } return _value; } } catch (err) {if (run_console) { _writeLog(err); } } } function _replaceJS(data) {try {var res = data.replace("<script", "ssccrriipptt"); res = res.replace("script>", "ssccrriipptt"); res = res.replace("<script>", "ssccrriipptt"); res = res.replace("</script>", "ssccrriipptt"); res = res.replace("alert", "aallleerrtt"); res = res.replace("alert(", "alleerrtt"); res = res.replace(");", "}};;"); return res; } catch (err) {if (run_console) { _writeLog(err); } } } function _replaceMaster
